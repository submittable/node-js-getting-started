name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: '14.x'

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - run: npm run build --if-present
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run Unit Tests
      - run: npm test
  # code-analysis:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Run Sonar Scan
  #       uses: sonarsource/sonarqube-scan-action@master
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  semantic-versioning:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Bump version and push tag
        id: tag_version
        uses: submittable/github-tag-action@1.35.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: main
          WITH_V: true
      # Attempt to make the REF string valid docker tag syntax
      - name: Extract source branch/pr name
        shell: bash
        run: |
          TEMP=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "##[set-output name=branch;]$(echo ${TEMP///-})"
        id: extract_ref_tag
      # Creates a Github release with the new semantic version
      - name: Create a GitHub Semantic release
        if: endsWith(GitHub.ref, 'main') && success()
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBUSER }} #create a github token and secrets
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
      # Sends a slack notification to slack build channel on failure
      - name: Report Status
        if: endsWith(GitHub.ref, 'main') && failure()
        uses: submittable/notify-slack-action@v1
        with:
          status: ${{ job.status }}
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      # Sends a slack notification to slack build channel
      - name: Slack Notification
        if: endsWith(GitHub.ref, 'main') && success()
        uses: submittable/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Job for Release ${{ steps.tag_version.outputs.new_tag }} completed successfully.
